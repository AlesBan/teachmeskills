2)
CREATE TRIGGER UserBooks_INSERT
ON UserBooks 
AFTER INSERT
AS
INSERT INTO UserBooks (CreatedDate)
VALUES(GETDATE())
----------------------------------------------------

3)
CREATE TRIGGER Users_INSERT
ON Users 
AFTER INSERT
AS
UPDATE Users SET ExpiredDate = DATEADD(year, 1, GETDATE())
------------------------------------------------------------

4) --- У всех юзеров получается один возраст ---
CREATE TRIGGER Users_IN_UP_addAge
ON Users 
AFTER INSERT
AS
BEGIN
	DECLARE @BirthDateIns date
	SELECT @BirthDateIns = INSERTED.[BirthDate] from INSERTED
    UPDATE Users SET Age = datediff(year, @BirthDateIns, GetDate())
END
------------------------------------------------------------

5)
ALTER TABLE UserBooks
ADD CONSTRAINT Unique_Values UNIQUE (UserId, BookId)
---------------------------------------------------------------

6) Добавление данных

INSERT INTO Authors (Id, FirstName)
VALUES (NEWID(), 'Amogus'),
(NEWID(), 'Ales'),
(NEWID(), 'Martin'),
(NEWID(), 'Senya');

INSERT INTO Books (Id, Name, AuthorId)
VALUES (NEWID(), 'Harry Potter and the Order of the Phoenix', 
(SELECT TOP 1 Id FROM Authors ORDER BY NEWID())),
(NEWID(), 'Friends, Lovers, and the Big Terrible Thing: A Memoir', 
(SELECT TOP 1 Id FROM Authors ORDER BY NEWID())),
(NEWID(), 'Verity', 
(SELECT TOP 1 Id FROM Authors ORDER BY NEWID())),
(NEWID(), 'Where the Crawdads Sing', 
(SELECT TOP 1 Id FROM Authors ORDER BY NEWID()));

INSERT INTO Users (Id, FirstName, Email, BirthDate)
VALUES 
(NEWID(), 'Tim', 'Tim@gmail.com', (CAST('2001-12-25 15:32:06.427' AS DateTime))),
(NEWID(), 'Richard', 'Richard@gmail.com',(CAST('2002-12-25 15:32:06.427' AS DateTime))),
(NEWID(), 'Jim', 'Jim@gmail.com', (CAST('2003-12-25 15:32:06.427' AS DateTime))),
(NEWID(), 'Kanye', 'Kanye@gmail.com', (CAST('2004-12-25 15:32:06.427' AS DateTime)));

INSERT INTO UserBooks (Id, UserId, BookId, CreatedDate)
VALUES 
(NEWID(), (SELECT TOP 1 Id FROM Users ORDER BY NEWID()), 
(SELECT TOP 1 Id FROM Books ORDER BY NEWID()), 
GETDATE()),
(NEWID(), (SELECT TOP 1 Id FROM Users ORDER BY NEWID()), 
(SELECT TOP 1 Id FROM Books ORDER BY NEWID()), 
GETDATE()),
(NEWID(), (SELECT TOP 1 Id FROM Users ORDER BY NEWID()), 
(SELECT TOP 1 Id FROM Books ORDER BY NEWID()), 
GETDATE()),
(NEWID(), (SELECT TOP 1 Id FROM Users ORDER BY NEWID()), 
(SELECT TOP 1 Id FROM Books ORDER BY NEWID()), 
GETDATE())
--------------------------------------------------------------

7)

CREATE VIEW UsersInfo 
(UserId, UserFullName, UserAge, AuthorFullName, BookName, BookYear)
AS 
SELECT U.Id,
	U.FirstName + ' ' + U.LastName,
	U.Age,
	A.FirstName + ' ' +  A.LastName,
	B.[Name],
	B.[Year]
FROM Users U
JOIN UserBooks UB
ON U.Id = UB.UserId 
INNER JOIN Books B 
ON UB.BookId = B.Id 
INNER JOIN Authors A  
ON B.AuthorId = A.Id 
-----------------------------------------------------------------

8) Тут трабла при вызове: Column names in each table must be unique. 
Column name 'Id' in table '#HasBooks' is specified more than once.

CREATE PROCEDURE DeleteUsersByExpiredDate
AS
BEGIN
	DECLARE @contRowsHasBooks INT
	DECLARE @contRowsHasNotBooks INT
	DECLARE @userExpiredDate DATE
	DECLARE @userId uniqueidentifier

	SELECT * INTO #HasBooks 
	FROM Users U 
	JOIN UserBooks UB
	ON U.Id = UB.UserId
	SELECT @contRowsHasBooks=COUNT(*) from #HasBooks

	SELECT * INTO #HasNotBooks
	FROM Users U 
	JOIN UserBooks UB
	ON U.Id = UB.UserId
	WHERE UB.UserId IS NULL
	SELECT @contRowsHasNotBooks=COUNT(*) from #HasNotBooks

	WHILE @contRowsHasBooks!=0
	BEGIN
		SELECT @userId = Id, @userExpiredDate = ExpiredDate
		FROM #HasBooks  
		WHERE Id=(SELECT MIN(Id) FROM #HasBooks) 
		IF @userExpiredDate > GETDATE()
			PRINT 'The user' + CAST(@userId AS VARCHAR(30)) + 'The user did not return the book'
		DELETE FROM #HasBooks WHERE Id=@userId
		SELECT @contRowsHasBooks=COUNT(*) from #HasBooks
	END

	WHILE @contRowsHasNotBooks!=0
	BEGIN
		SELECT @userId = Id, @userExpiredDate = ExpiredDate
		FROM #HasNotBooks  
		WHERE Id=(SELECT MIN(Id) FROM #HasNotBooks) 
		IF @userExpiredDate > GETDATE()
			DELETE FROM Users WHERE Id=@userId
		DELETE FROM #HasBooks WHERE Id=@userId
		SELECT @contRowsHasBooks=COUNT(*) from #HasBooks
	END
END